name: GraalVM Native Build

on:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4

      - name: Setup GraalVM for JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'  # Ensure you're using GraalVM for Java 21
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Developer Command Prompt for cl.exe
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-2019'
        shell: cmd
        run: |
          FOR /F "usebackq tokens=*" %%i IN (`vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -products * -property installationPath`) DO (
            CALL "%%i\VC\Auxiliary\Build\vcvars64.bat"
            cl
          )

      - name: Build Windows Native Image
        run: mvn gluonfx:build

      - name: Upload .exe artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: |
            target\gluonfx\*\*.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup GraalVM for JDK 21 (macOS)
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build macOS Native Image
        run: ./mvnw gluonfx:build

      - name: Build macOS .app bundle
        run: mvn gluonfx:package || true

      - name: Build macOS .app bundle
        if: matrix.os == 'macos-latest'
        continue-on-error: true
        run: mvn gluonfx:package -Dgvm.packageType=app || true

      - name: Run DMG creation script
        run: sh ./package-dmg.sh

      - name: Upload .dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            target/gluonfx/*/*.app