name: Build Electron Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      # This will continue to run other platforms even if one fails
      fail-fast: false
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Disable caching since lock file may not be available
          
      - name: Install dependencies
        # Use install instead of ci since lock file may not be available
        run: npm install
          
      - name: Build application
        run: npm run build
          
      # Set environment variables for the entire job using the env context at the job level
      # instead of as a separate step
      
      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run package-win
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        
      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Build .app files for both architectures
          npm run package-mac
          
          # Check if app was created
          if [ ! -d "dist/mac" ]; then
            echo "Mac build directory not found"
            exit 1
          fi
          
          ls -la dist/mac/
          
          # Remove quarantine attributes to bypass Gatekeeper
          sudo xattr -cr dist/mac/*.app || echo "No .app files found directly in mac directory"
          
          # Handle multi-architecture builds
          mkdir -p dist/mac-x64
          mkdir -p dist/mac-arm64
          
          # Look for architecture-specific builds
          if [ -d "dist/mac-x64" ] && [ "$(ls -A dist/mac-x64 2>/dev/null)" ]; then
            echo "x64 build directory already exists and has contents"
          elif [ -d "dist/mac/BlitzLauncher-x64.app" ]; then
            cp -r dist/mac/BlitzLauncher-x64.app dist/mac-x64/
          elif [ -d "dist/mac/BlitzLauncher.app" ]; then
            cp -r dist/mac/BlitzLauncher.app dist/mac-x64/BlitzLauncher-x64.app
          fi
          
          if [ -d "dist/mac-arm64" ] && [ "$(ls -A dist/mac-arm64 2>/dev/null)" ]; then
            echo "arm64 build directory already exists and has contents"
          elif [ -d "dist/mac/BlitzLauncher-arm64.app" ]; then
            cp -r dist/mac/BlitzLauncher-arm64.app dist/mac-arm64/
          elif [ -d "dist/mac/BlitzLauncher.app" ]; then
            cp -r dist/mac/BlitzLauncher.app dist/mac-arm64/BlitzLauncher-arm64.app
          fi
          
          # Make sure we have something to zip
          if [ ! "$(ls -A dist/mac-x64 2>/dev/null)" ] && [ ! "$(ls -A dist/mac-arm64 2>/dev/null)" ]; then
            echo "No .app files found in architecture directories, checking main directory"
            if [ -d "dist/mac/BlitzLauncher.app" ]; then
              cp -r dist/mac/BlitzLauncher.app dist/mac-x64/BlitzLauncher-x64.app
              cp -r dist/mac/BlitzLauncher.app dist/mac-arm64/BlitzLauncher-arm64.app
            else
              echo "No .app files found at all!"
              find dist -type f -name "*.app" || echo "No .app files found by find"
              ls -la dist/
              exit 1
            fi
          fi
          
          # Remove any quarantine attributes again after copying
          sudo xattr -cr dist/mac-x64/*.app || echo "No .app files found in x64 directory"
          sudo xattr -cr dist/mac-arm64/*.app || echo "No .app files found in arm64 directory"
          
          # Move the .app files to dist for artifact collection (no need to zip)
          if [ -d "dist/mac-x64/BlitzLauncher-x64.app" ]; then
            mv dist/mac-x64/BlitzLauncher-x64.app dist/BlitzLauncher-x64.app
          fi
          
          if [ -d "dist/mac-arm64/BlitzLauncher-arm64.app" ]; then
            mv dist/mac-arm64/BlitzLauncher-arm64.app dist/BlitzLauncher-arm64.app
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      # Upload macOS x64 artifact
      - name: Upload macOS x64 artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-macos-x64"
          path: dist/BlitzLauncher-x64.app
          if-no-files-found: warn
          
      # Upload macOS arm64 artifact
      - name: Upload macOS arm64 artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-macos-arm64"
          path: dist/BlitzLauncher-arm64.app
          if-no-files-found: warn
          
      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run package-linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      # Upload artifacts for Windows and Linux
      - name: Upload Windows and Linux artifacts
        if: matrix.os != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-${{ matrix.os }}.${{ matrix.os == 'windows-latest' && 'exe' || 'AppImage' }}"
          path: |
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: warn 