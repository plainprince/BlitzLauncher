name: Build Electron Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      # This will continue to run other platforms even if one fails
      fail-fast: false
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Disable caching since lock file may not be available
          
      - name: Install dependencies
        # Use install instead of ci since lock file may not be available
        run: npm install
          
      - name: Build application
        run: npm run build
          
      # Set environment variables for the entire job using the env context at the job level
      # instead of as a separate step
      
      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run package-win
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        
      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Build .app files for both architectures
          npm run package-mac
          
          # Debug - show directory contents after build
          echo "=== Contents of dist directory ==="
          ls -la dist/ || echo "dist directory not found"
          
          # Check if the mac and mac-arm64 directories were created
          if [ -d "dist/mac" ]; then
            echo "=== Contents of dist/mac ==="
            ls -la dist/mac/
          else
            echo "dist/mac directory not found!"
          fi
          
          if [ -d "dist/mac-arm64" ]; then
            echo "=== Contents of dist/mac-arm64 ==="
            ls -la dist/mac-arm64/
          else
            echo "dist/mac-arm64 directory not found!"
          fi
          
          # Create directory for zip files
          mkdir -p dist/zipped
          
          # Remove quarantine attributes and create zip for Intel build
          if [ -d "dist/mac/BlitzLauncher.app" ]; then
            echo "Removing quarantine attributes from Intel build"
            sudo xattr -cr dist/mac/BlitzLauncher.app
            
            echo "Creating zip archive for Intel build"
            cd dist/mac
            zip -r ../zipped/BlitzLauncher-intel.zip BlitzLauncher.app
            cd ../..
          else
            echo "Intel build not found at expected location: dist/mac/BlitzLauncher.app"
          fi
          
          # Remove quarantine attributes and create zip for ARM build
          if [ -d "dist/mac-arm64/BlitzLauncher.app" ]; then
            echo "Removing quarantine attributes from ARM build"
            sudo xattr -cr dist/mac-arm64/BlitzLauncher.app
            
            echo "Creating zip archive for ARM build"
            cd dist/mac-arm64
            zip -r ../zipped/BlitzLauncher-apple-silicon.zip BlitzLauncher.app
            cd ../..
          else
            echo "ARM build not found at expected location: dist/mac-arm64/BlitzLauncher.app"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      # Upload macOS Intel (x64) zip artifact
      - name: Upload macOS Intel artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-macos-intel"
          path: dist/zipped/BlitzLauncher-intel.zip
          if-no-files-found: warn
          
      # Upload macOS ARM (Apple Silicon) zip artifact  
      - name: Upload macOS ARM artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-macos-apple-silicon"
          path: dist/zipped/BlitzLauncher-apple-silicon.zip
          if-no-files-found: warn
          
      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run package-linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          
      # Upload artifacts for Windows and Linux
      - name: Upload Windows and Linux artifacts
        if: matrix.os != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: "BlitzLauncher-${{ matrix.os }}.${{ matrix.os == 'windows-latest' && 'exe' || 'AppImage' }}"
          path: |
            dist/*.exe
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: warn 